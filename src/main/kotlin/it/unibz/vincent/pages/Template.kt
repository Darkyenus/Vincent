package it.unibz.vincent.pages

import io.undertow.server.HttpServerExchange
import it.unibz.vincent.CSRF_FORM_TOKEN_NAME
import it.unibz.vincent.Session
import it.unibz.vincent.util.LocaleStack
import it.unibz.vincent.util.languages
import it.unibz.vincent.util.sendHtml
import kotlinx.html.BODY
import kotlinx.html.FORM
import kotlinx.html.FlowContent
import kotlinx.html.FormEncType
import kotlinx.html.FormMethod
import kotlinx.html.HTML
import kotlinx.html.HtmlTagMarker
import kotlinx.html.body
import kotlinx.html.div
import kotlinx.html.form
import kotlinx.html.head
import kotlinx.html.hiddenInput
import kotlinx.html.lang
import kotlinx.html.link
import kotlinx.html.meta
import kotlinx.html.title

/** Build head and body. */
fun HTML.base(lang:String = "en", title:String = "Vincent", description:String = "", createBody: BODY.() -> Unit) {
	this.lang = lang
	head {
		meta(charset = "UTF-8")
		title(title)
		if (description.isNotBlank()) {
			meta(name="description", content=description)
		}
		meta("viewport", "width=device-width, initial-scale=1")

		link("https://fonts.googleapis.com/css?family=Merriweather:400,700&display=swap&subset=latin-ext", rel="stylesheet", type="text/css") {
			attributes["referrerpolicy"] = "no-referrer"
		}
		link("css/normalize.css", rel="stylesheet")
		link("css/skeleton.css", rel="stylesheet")

		// Current favicon generated by https://realfavicongenerator.net
		// from https://www.icofont.com (glass)

		comment("Generated by realfavicongenerator.net, icon under MIT license from www.icofont.com")
		link(rel="apple-touch-icon", href="/apple-touch-icon.png") { sizes = "180x180" }
		link(rel="icon", type="image/png", href="/favicon-32x32.png") { sizes = "32x32" }
		link(rel="icon", type="image/png", href="/favicon-16x16.png") { sizes = "16x16" }
		link(rel="manifest", href="/site.webmanifest")
		link(rel="mask-icon", href="/safari-pinned-tab.svg") { attributes["color"] ="#b00b10" }
		meta(name="msapplication-TileColor", content="#b91d47")
		meta(name="theme-color", content="#ffffff")
	}

	body {
		createBody.invoke(this)
	}
}

/** Version of [form] when in a session. Includes CSRF protection token.  */
fun FlowContent.sessionForm(session: Session, action : String? = null, encType : FormEncType? = null, method : FormMethod? = FormMethod.post, classes : String? = null, block : FORM.() -> Unit = {}) {
	form(action, encType, method, classes) {
		block()
		hiddenInput(name = CSRF_FORM_TOKEN_NAME) { value = session.csrfToken }
	}
}

fun HttpServerExchange.sendBase(title:String = "", createBody: BODY.(HttpServerExchange, LocaleStack) -> Unit) {
	val languages = languages()
	// TODO(jp): Localize!
	sendHtml {
		base("en", title, "Wine evaluation questionnaires") {
			createBody(this@sendBase, languages)
		}
	}
}